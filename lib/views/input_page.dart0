import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/input_controller.dart';

class InputPage extends StatefulWidget {
  const InputPage({super.key});

  @override
  State<InputPage> createState() => _InputPageState();
}

class _InputPageState extends State<InputPage> {
  final _formKey = GlobalKey<FormState>();
  final List<FocusNode> _focusNodes = [];
  final List<bool> _fieldHasFocus = [];
  var controller2;
  @override
  void initState() {
    super.initState();
    // تهيئة 20 حقل كحد أقصى
    for (int i = 0; i < 20; i++) {
      _focusNodes.add(FocusNode());
      _fieldHasFocus.add(false);
      _focusNodes[i].addListener(() {
        setState(() {
          _fieldHasFocus[i] = _focusNodes[i].hasFocus;
        });
      });
    }
  }

  @override
  void dispose() {
    for (var node in _focusNodes) {
      node.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final controller = Provider.of<InputController>(context);
    controller2 = controller;
    return Scaffold(
      appBar: AppBar(
        title: const Text('يومية جديدة', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blueGrey[800],
        actions: [
          IconButton(
            icon: const Icon(Icons.history, color: Colors.white),
            onPressed: () => Navigator.pushNamed(context, '/records'),
          ),
        ],
      ),
      body: Directionality(
        textDirection: TextDirection.rtl,
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                _buildBookInfoSection(controller),
                const SizedBox(height: 15),
                _buildExpensesSection(controller),
                const SizedBox(height: 15),
                _buildResultsSection(controller),
                const SizedBox(height: 20),
                _buildSaveButton(context),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildResultsSection(InputController controller) {
    return ExpansionTile(
      leading: const Icon(Icons.calculate, color: Colors.blueGrey),
      title:
          const Text('النتائج', style: TextStyle(fontWeight: FontWeight.bold)),
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            children: [
              _buildResultRow('التذاكر المتبقية', controller.remainingTickets),
              _buildResultRow('التذاكر المباعة', controller.tickets),
              _buildResultRow('إجمالي الصرفة', controller.expenseTotal),
              _buildResultRow('صندوق التذاكر', controller.cashBox),
              _buildResultRow('الإجمالي النهائي', controller.total,
                  isTotal: true),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildBookInfoSection(InputController controller) {
    return ExpansionTile(
      leading: const Icon(Icons.book, color: Colors.blueGrey),
      title: const Text('معلومات الدفاتر',
          style: TextStyle(fontWeight: FontWeight.bold)),
      children: [
        GridView.count(
          crossAxisCount: 2,
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          childAspectRatio: 3,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          children: [
            _buildNumberField(0, 'سعر التذكرة', controller.ticketPrice,
                (v) => controller.ticketPrice = v),
            _buildNumberField(1, 'قبل البيع', controller.preSale.toDouble(),
                (v) => controller.preSale = v.toInt()),
            _buildNumberField(2, 'رقم الدفتر', controller.bookNumber.toDouble(),
                (v) => controller.bookNumber = v.toInt()),
            _buildNumberField(
                3,
                'دفاتر مكتملة',
                controller.completedBooks.toDouble(),
                (v) => controller.completedBooks = v.toInt()),
            _buildNumberField(
                4,
                'تذاكر/الورقة',
                controller.ticketsPerSheet.toDouble(),
                (v) => controller.ticketsPerSheet = v.toInt()),
            _buildNumberField(5, 'البقالة', controller.grocery,
                (v) => controller.grocery = v),
          ],
        ),
      ],
    );
  }

  Widget _buildExpensesSection(InputController controller) {
    return ExpansionTile(
      leading: const Icon(Icons.money_off, color: Colors.blueGrey),
      title: const Text('المصروفات',
          style: TextStyle(fontWeight: FontWeight.bold)),
      children: [
        GridView.count(
          crossAxisCount: 2,
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          childAspectRatio: 3,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          children: [
            _buildNumberField(
                6, 'غداء', controller.lunch, (v) => controller.lunch = v),
            _buildNumberField(
                7, 'هيثم', controller.hetham, (v) => controller.hetham = v),
            _buildNumberField(
                8, 'الحوري', controller.alhouri, (v) => controller.alhouri = v),
            _buildNumberField(
                9, 'ماجد', controller.majed, (v) => controller.majed = v),
            _buildNumberField(
                10, 'وايت', controller.white, (v) => controller.white = v),
            _buildNumberField(
                11, 'أنس', controller.anas, (v) => controller.anas = v),
          ],
        ),
        ...controller.manualExpenses.asMap().entries.map((entry) {
          int index = entry.key;

          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextFormField(
                    decoration: const InputDecoration(hintText: 'اسم المصروف'),
                    onChanged: (v) =>
                        controller.updateManualExpenseName(index, v),
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: _buildNumberField(
                    12 + index,
                    'القيمة',
                    controller.manualExpenses[index].value,
                    (v) => controller.updateManualExpenseValue(index, v),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.delete, color: Colors.red),
                  onPressed: () => controller.removeManualExpense(index),
                ),
              ],
            ),
          );
        }).toList(),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8),
          child: ElevatedButton(
            child: const Text('إضافة مصروف جديد',
                style: TextStyle(color: Colors.white)),
            onPressed: () {
              controller.addManualExpense('', 0);

              // التركيز على الحقل الجديد

              Future.delayed(const Duration(milliseconds: 100), () {
                FocusScope.of(context).requestFocus(
                    _focusNodes[12 + controller.manualExpenses.length - 1]);
              });
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blueGrey[800],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildNumberField(
      int index, String label, double value, Function(double) onChanged) {
    bool isFocused = false;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 4),
      child: TextFormField(
        focusNode: _focusNodes[index],
        controller: TextEditingController(
          text: value.toStringAsFixed(2),
        ),
        decoration: InputDecoration(
          hintText: 'أدخل $label',
          labelText: _fieldHasFocus[index] ? label : null,
          filled: true,
          fillColor: Colors.grey[100],
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide.none,
          ),
        ),
        keyboardType: TextInputType.number,
        textInputAction: TextInputAction.next,
        onFieldSubmitted: (_) => FocusScope.of(context).nextFocus(),
        onChanged: (v) => onChanged(double.tryParse(v) ?? 0),
        onTap: () {
          isFocused = true;
        },
      ),
    );
  }

  Widget _buildResultRow(String label, dynamic value, {bool isTotal = false}) {
    return ListTile(
      title: Text(label),
      trailing: Text(
        value.toStringAsFixed(2),
        style: TextStyle(
          fontWeight: isTotal ? FontWeight.bold : FontWeight.normal,
          color: isTotal ? Colors.blueGrey : Colors.black87,
          fontSize: 16,
        ),
      ),
    );
  }

  Widget _buildSaveButton(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: ElevatedButton.icon(
        icon: const Icon(Icons.save, color: Colors.white),
        label: const Text('حفظ اليومية',
            style: TextStyle(fontSize: 18, color: Colors.white)),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.blueGrey[800],
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
        onPressed: () async {
          if (_formKey.currentState!.validate()) {
            final success = await controller2.saveRecord();
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                  content:
                      Text(success ? 'تم الحفظ بنجاح' : 'حدث خطأ أثناء الحفظ')),
            );
          }
        },
      ),
    );
  }
}
